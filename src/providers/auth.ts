import { AuthBindings, AuthProvider } from "@refinedev/core";

import { API_URL, dataProvider } from "./data";
import { User } from "@/graphql/schema.types";

export const authProvider: AuthProvider = {
  login: async ({ email, password }) => {
    try {
      // call the login mutation
      // dataProvider.custom is used to make a custom request to the GraphQL API
      // this will call dataProvider which will go through the fetchWrapper function
      const { data } = await dataProvider.custom({
        url: API_URL,
        method: "post",
        headers: {},
        meta: {
          variables: { email, password },
          // pass the email and password to login
          rawQuery: `
            mutation Login($email: String!, $password: String!) {
              login(loginInput: { email: $email, password: $password }) {
                id
                accessToken
              }
            }
          `,
        },
      });

      // store the accessToken in localStorage
      localStorage.setItem("access_token", data.login.accessToken);
      localStorage.setItem("user_id", data.login.id);

      return {
        success: true,
        redirectTo: "/",
      };
    } catch (e) {
      const error = e as Error;

      return {
        success: false,
        error: {
          message: "message" in error ? error.message : "Login failed",
          name: "name" in error ? error.name : "Invalid email or password",
        },
      };
    }
  },

  register: async ({ email, password }) => {
    try {
      // call the register mutation
      // dataProvider.custom is used to make a custom request to the GraphQL API
      // this will call dataProvider which will go through the fetchWrapper function
      const { data } = await dataProvider.custom({
        url: API_URL,
        method: "post",
        headers: {},
        meta: {
          variables: { email, password },
          // pass the email and password to create a new user
          rawQuery: `
            mutation Register($email: String!, $password: String!) {
              register(registerInput: { email: $email, password: $password, accessLevel: "user"}) {
                id
              }
            }
          `,
        },
      });

      return {
        success: true,
        redirectTo: "/login",
      };
    } catch (e) {
      const error = e as Error;

      return {
        success: false,
        error: {
          message: "message" in error ? error.message : "Register failed",
          name: "name" in error ? error.name : "Email already exists",
        },
      };
    }
  },

  // simply remove the accessToken from localStorage for the logout
  logout: async () => {
    localStorage.removeItem("access_token");
    localStorage.removeItem("user_id");

    return {
      success: true,
      redirectTo: "/login",
    };
  },

  onError: async (error) => {
    // a check to see if the error is an authentication error
    // if so, set logout to true
    if (error.statusCode === "UNAUTHENTICATED") {
      return {
        logout: true,
        ...error,
      };
    }

    return { error };
  },

  check: async () => {
    const user = localStorage.getItem("access_token");

    if (user) {
      return {
        authenticated: true,
      };
    }

    return {
      authenticated: false,
      logout: true,
      redirectTo: "/login",
      error: {
        message: "Check failed",
        name: "Unauthorized",
      },
    };
  },

  // get the user information
  getIdentity: async () => {
    const userId = localStorage.getItem("user_id");

    try {
      // call the GraphQL API to get the user information
      // we're using me:any because the GraphQL API doesn't have a type for the me query yet.
      // we'll add some queries and mutations later and change this to User which will be generated by codegen.
      const { data } = await dataProvider.custom<{ getUser: User }>({
        url: API_URL,
        headers: {},
        method: "post",
        meta: {
          variables: { userId },
          // get the user information such as name, email, etc.
          rawQuery: `
          query Query($userId: String!) {
            getUser(userId: $userId) {
              id
              name
              email
              createdAt
              accessLevel
              accessToken
            }
          }
          `,
        },
      });
      return data.getUser;
    } catch (error) {
      return undefined;
    }
  },
};
